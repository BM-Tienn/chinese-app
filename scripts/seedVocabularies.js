const mongoose = require('mongoose');
const Vocabulary = require('../models/Vocabulary');
const sampleVocabularies = require('../data/sampleVocabularies');
require('dotenv').config();

// K·∫øt n·ªëi MongoDB
const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/chinese-ai');
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
        process.exit(1);
    }
};

// Seed d·ªØ li·ªáu t·ª´ v·ª±ng
const seedVocabularies = async () => {
    try {
        console.log('üîÑ B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu t·ª´ v·ª±ng...');

        // X√≥a t·∫•t c·∫£ t·ª´ v·ª±ng c≈© (n·∫øu c√≥)
        await Vocabulary.deleteMany({});
        console.log('üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu t·ª´ v·ª±ng c≈©');

        // Th√™m t·ª´ v·ª±ng m·ªõi
        const insertedVocabularies = await Vocabulary.insertMany(sampleVocabularies);
        console.log(`‚úÖ ƒê√£ th√™m ${insertedVocabularies.length} t·ª´ v·ª±ng v√†o database`);

        // Hi·ªÉn th·ªã th·ªëng k√™
        const stats = await Vocabulary.aggregate([
            {
                $group: {
                    _id: null,
                    totalVocabularies: { $sum: 1 },
                    totalByHSKLevel: {
                        $push: {
                            hskLevel: '$hskLevel',
                            count: 1
                        }
                    },
                    totalByCategory: {
                        $push: {
                            category: '$category',
                            count: 1
                        }
                    },
                    totalByDifficulty: {
                        $push: {
                            difficulty: '$difficulty',
                            count: 1
                        }
                    }
                }
            }
        ]);

        if (stats.length > 0) {
            const stat = stats[0];
            console.log('\nüìä Th·ªëng k√™ t·ª´ v·ª±ng ƒë√£ th√™m:');
            console.log(`   T·ªïng s·ªë: ${stat.totalVocabularies}`);

            // Th·ªëng k√™ theo HSK level
            const hskStats = {};
            stat.totalByHSKLevel.forEach(item => {
                if (item.hskLevel) {
                    hskStats[`HSK${item.hskLevel}`] = (hskStats[`HSK${item.hskLevel}`] || 0) + item.count;
                }
            });
            console.log('   Theo HSK level:', hskStats);

            // Th·ªëng k√™ theo category
            const categoryStats = {};
            stat.totalByCategory.forEach(item => {
                categoryStats[item.category] = (categoryStats[item.category] || 0) + item.count;
            });
            console.log('   Theo danh m·ª•c:', categoryStats);

            // Th·ªëng k√™ theo difficulty
            const difficultyStats = {};
            stat.totalByDifficulty.forEach(item => {
                difficultyStats[item.difficulty] = (difficultyStats[item.difficulty] || 0) + item.count;
            });
            console.log('   Theo ƒë·ªô kh√≥:', difficultyStats);
        }

        console.log('\nüéâ Seed d·ªØ li·ªáu t·ª´ v·ª±ng ho√†n t·∫•t!');

    } catch (error) {
        console.error('‚ùå L·ªói khi seed d·ªØ li·ªáu:', error);
    } finally {
        // ƒê√≥ng k·∫øt n·ªëi
        await mongoose.connection.close();
        console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
        process.exit(0);
    }
};

// Ch·∫°y script
const runSeed = async () => {
    try {
        await connectDB();
        await seedVocabularies();
    } catch (error) {
        console.error('‚ùå L·ªói ch·∫°y script seed:', error);
        process.exit(1);
    }
};

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    runSeed();
}

module.exports = { runSeed };
