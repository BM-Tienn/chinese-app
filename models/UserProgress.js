const mongoose = require('mongoose');

// Schema ƒë·ªÉ theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p t·ªïng th·ªÉ c·ªßa ng∆∞·ªùi d√πng
const userProgressSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: [true, 'User progress must belong to a user!'],
    unique: true,
    index: true
  },
  // Th·ªëng k√™ t·ªïng quan
  totalWords: {
    type: Number,
    default: 0
  },
  masteredWords: {
    type: Number,
    default: 0
  },
  learningStreak: {
    type: Number,
    default: 0
  },
  longestStreak: {
    type: Number,
    default: 0
  },
  lastStudyDate: {
    type: Date,
    default: null
  },
  // H·ªá th·ªëng level v√† XP
  currentLevel: {
    type: Number,
    default: 1
  },
  experiencePoints: {
    type: Number,
    default: 0
  },
  totalExperience: {
    type: Number,
    default: 0
  },
  // Ti·∫øn ƒë·ªô theo tu·∫ßn
  weeklyProgress: [{
    week: {
      type: String, // Format: "YYYY-WW" (nƒÉm-tu·∫ßn)
      required: true
    },
    wordsLearned: {
      type: Number,
      default: 0
    },
    exercisesCompleted: {
      type: Number,
      default: 0
    },
    timeSpent: {
      type: Number, // Th·ªùi gian h·ªçc (ph√∫t)
      default: 0
    },
    accuracy: {
      type: Number,
      default: 0
    },
    streakDays: {
      type: Number,
      default: 0
    }
  }],
  // Th√†nh t√≠ch ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
  achievements: [{
    id: {
      type: String,
      required: true
    },
    name: {
      type: String,
      required: true
    },
    description: {
      type: String,
      required: true
    },
    icon: {
      type: String,
      required: true
    },
    unlockedAt: {
      type: Date,
      default: Date.now
    },
    progress: {
      type: Number,
      default: 0
    },
    maxProgress: {
      type: Number,
      required: true
    }
  }],
  // Th·ªëng k√™ h·ªçc t·∫≠p chi ti·∫øt
  studyStats: {
    totalStudyTime: {
      type: Number, // T·ªïng th·ªùi gian h·ªçc (ph√∫t)
      default: 0
    },
    averageStudyTimePerDay: {
      type: Number, // Th·ªùi gian h·ªçc trung b√¨nh m·ªói ng√†y (ph√∫t)
      default: 0
    },
    totalSessions: {
      type: Number,
      default: 0
    },
    bestAccuracy: {
      type: Number,
      default: 0
    },
    totalExercises: {
      type: Number,
      default: 0
    },
    correctExercises: {
      type: Number,
      default: 0
    }
  },
  // C√†i ƒë·∫∑t h·ªçc t·∫≠p
  studySettings: {
    dailyGoal: {
      type: Number, // M·ª•c ti√™u t·ª´ v·ª±ng m·ªói ng√†y
      default: 10
    },
    studyReminder: {
      type: Boolean,
      default: true
    },
    reminderTime: {
      type: String, // Format: "HH:MM"
      default: "09:00"
    },
    autoReview: {
      type: Boolean,
      default: true
    }
  },
  // L·ªãch s·ª≠ h·ªçc t·∫≠p theo ng√†y
  dailyHistory: [{
    date: {
      type: Date,
      required: true
    },
    wordsLearned: {
      type: Number,
      default: 0
    },
    exercisesCompleted: {
      type: Number,
      default: 0
    },
    timeSpent: {
      type: Number, // Ph√∫t
      default: 0
    },
    accuracy: {
      type: Number,
      default: 0
    },
    streakMaintained: {
      type: Boolean,
      default: false
    }
  }]
}, {
  timestamps: true,
  collection: 'user_progress'
});

// Index ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n
userProgressSchema.index({ userId: 1 });
userProgressSchema.index({ 'weeklyProgress.week': 1 });
userProgressSchema.index({ 'dailyHistory.date': 1 });

// Virtual field ƒë·ªÉ t√≠nh t·ª∑ l·ªá ho√†n th√†nh
userProgressSchema.virtual('completionRate').get(function () {
  if (this.totalWords === 0) return 0;
  return Math.round((this.masteredWords / this.totalWords) * 100);
});

// Virtual field ƒë·ªÉ t√≠nh XP c·∫ßn thi·∫øt cho level ti·∫øp theo
userProgressSchema.virtual('xpForNextLevel').get(function () {
  return Math.pow(this.currentLevel + 1, 2) * 100;
});

// Virtual field ƒë·ªÉ t√≠nh t·ª∑ l·ªá ho√†n th√†nh level hi·ªán t·∫°i
userProgressSchema.virtual('levelProgress').get(function () {
  const currentLevelXP = Math.pow(this.currentLevel, 2) * 100;
  const nextLevelXP = Math.pow(this.currentLevel + 1, 2) * 100;
  const xpInCurrentLevel = this.experiencePoints - currentLevelXP;
  const xpNeededForLevel = nextLevelXP - currentLevelXP;

  return Math.round((xpInCurrentLevel / xpNeededForLevel) * 100);
});

// Method ƒë·ªÉ c·∫≠p nh·∫≠t streak
userProgressSchema.methods.updateStreak = function () {
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);

  // Ki·ªÉm tra xem h√¥m qua c√≥ h·ªçc kh√¥ng
  const yesterdayStudy = this.dailyHistory.find(day =>
    day.date.toDateString() === yesterday.toDateString()
  );

  if (yesterdayStudy && yesterdayStudy.timeSpent > 0) {
    // Duy tr√¨ streak
    this.learningStreak += 1;
    if (this.learningStreak > this.longestStreak) {
      this.longestStreak = this.learningStreak;
    }
  } else {
    // Reset streak
    this.learningStreak = 0;
  }

  this.lastStudyDate = today;
  return this.save();
};

// Method ƒë·ªÉ th√™m XP
userProgressSchema.methods.addExperience = function (amount, reason = '') {
  this.experiencePoints += amount;
  this.totalExperience += amount;

  // Ki·ªÉm tra level up
  while (this.experiencePoints >= this.xpForNextLevel) {
    this.currentLevel += 1;
    // C√≥ th·ªÉ th√™m logic th√¥ng b√°o level up ·ªü ƒë√¢y
  }

  return this.save();
};

// Method ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô tu·∫ßn
userProgressSchema.methods.updateWeeklyProgress = function (weekData) {
  const weekIndex = this.weeklyProgress.findIndex(w => w.week === weekData.week);

  if (weekIndex !== -1) {
    // C·∫≠p nh·∫≠t tu·∫ßn hi·ªán t·∫°i
    this.weeklyProgress[weekIndex] = {
      ...this.weeklyProgress[weekIndex],
      ...weekData
    };
  } else {
    // Th√™m tu·∫ßn m·ªõi
    this.weeklyProgress.push(weekData);
  }

  // Gi·ªØ ch·ªâ 12 tu·∫ßn g·∫ßn nh·∫•t
  if (this.weeklyProgress.length > 12) {
    this.weeklyProgress = this.weeklyProgress.slice(-12);
  }

  return this.save();
};

// Method ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô ng√†y
userProgressSchema.methods.updateDailyProgress = function (dailyData) {
  const today = new Date().toDateString();
  const dayIndex = this.dailyHistory.findIndex(day =>
    day.date.toDateString() === today
  );

  if (dayIndex !== -1) {
    // C·∫≠p nh·∫≠t ng√†y hi·ªán t·∫°i
    this.dailyHistory[dayIndex] = {
      ...this.dailyHistory[dayIndex],
      ...dailyData
    };
  } else {
    // Th√™m ng√†y m·ªõi
    this.dailyHistory.push({
      date: new Date(),
      ...dailyData
    });
  }

  // Gi·ªØ ch·ªâ 30 ng√†y g·∫ßn nh·∫•t
  if (this.dailyHistory.length > 30) {
    this.dailyHistory = this.dailyHistory.slice(-30);
  }

  return this.save();
};

// Method ƒë·ªÉ ki·ªÉm tra v√† m·ªü kh√≥a achievements
userProgressSchema.methods.checkAchievements = function () {
  const newAchievements = [];

  // Achievement: First Word
  if (this.totalWords >= 1 && !this.achievements.find(a => a.id === 'first_word')) {
    newAchievements.push({
      id: 'first_word',
      name: 'T·ª´ ƒë·∫ßu ti√™n',
      description: 'H·ªçc t·ª´ v·ª±ng ƒë·∫ßu ti√™n',
      icon: 'üåü',
      maxProgress: 1
    });
  }

  // Achievement: Word Master
  if (this.masteredWords >= 10 && !this.achievements.find(a => a.id === 'word_master')) {
    newAchievements.push({
      id: 'word_master',
      name: 'B·∫≠c th·∫ßy t·ª´ v·ª±ng',
      description: 'Thu·ªôc l√≤ng 10 t·ª´ v·ª±ng',
      icon: 'üëë',
      maxProgress: 10
    });
  }

  // Achievement: Streak Master
  if (this.learningStreak >= 7 && !this.achievements.find(a => a.id === 'streak_master')) {
    newAchievements.push({
      id: 'streak_master',
      name: 'Ki√™n tr√¨',
      description: 'H·ªçc li√™n t·ª•c 7 ng√†y',
      icon: 'üî•',
      maxProgress: 7
    });
  }

  // Achievement: Level Up
  if (this.currentLevel >= 5 && !this.achievements.find(a => a.id === 'level_up')) {
    newAchievements.push({
      id: 'level_up',
      name: 'ThƒÉng c·∫•p',
      description: 'ƒê·∫°t c·∫•p ƒë·ªô 5',
      icon: '‚≠ê',
      maxProgress: 5
    });
  }

  // Th√™m achievements m·ªõi
  if (newAchievements.length > 0) {
    this.achievements.push(...newAchievements);
    return this.save();
  }

  return this;
};

// Static method ƒë·ªÉ t√¨m ho·∫∑c t·∫°o user progress
userProgressSchema.statics.findOrCreate = async function (userId) {
  let progress = await this.findOne({ userId });

  if (!progress) {
    progress = new this({
      userId,
      achievements: [
        {
          id: 'welcome',
          name: 'Ch√†o m·ª´ng',
          description: 'B·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc t·∫≠p',
          icon: 'üéâ',
          maxProgress: 1,
          progress: 1
        }
      ]
    });
    await progress.save();
  }

  return progress;
};

// Static method ƒë·ªÉ l·∫•y th·ªëng k√™
userProgressSchema.statics.getStats = function (filters = {}) {
  const matchStage = {};

  if (filters.userId) matchStage.userId = filters.userId;
  if (filters.minLevel) matchStage.currentLevel = { $gte: filters.minLevel };
  if (filters.maxLevel) matchStage.currentLevel = { $lte: filters.maxLevel };

  return this.aggregate([
    { $match: matchStage },
    {
      $group: {
        _id: null,
        totalUsers: { $sum: 1 },
        avgLevel: { $avg: '$currentLevel' },
        avgExperience: { $avg: '$experiencePoints' },
        avgWords: { $avg: '$totalWords' },
        avgMasteredWords: { $avg: '$masteredWords' },
        avgStreak: { $avg: '$learningStreak' },
        totalAchievements: { $sum: { $size: '$achievements' } }
      }
    }
  ]);
};

const UserProgress = mongoose.model('UserProgress', userProgressSchema);

module.exports = UserProgress;
